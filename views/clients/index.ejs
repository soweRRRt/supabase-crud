<%- include('../partials/header', { title: "–ö–ª–∏–µ–Ω—Ç—ã", user }) %>

<div class="container py-5">
  <h1 class="mb-4">–ö–ª–∏–µ–Ω—Ç—ã</h1>

  <!-- –§–æ—Ä–º–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ -->
  <div class="card mb-4 shadow-sm">
    <div class="card-header bg-primary text-white">
      <h5 class="mb-0">–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</h5>
    </div>
    <div class="card-body">
      <form method="GET" action="/clients" class="row g-3">
        <div class="col-md-4">
          <label for="search" class="form-label">–§–ò–û</label>
          <input type="text" class="form-control" id="search" name="search" value="<%= filters.search || '' %>" placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û...">
        </div>

        <div class="col-md-3">
          <label for="status" class="form-label">–°—Ç–∞—Ç—É—Å</label>
          <select class="form-select" id="status" name="status">
            <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <% statuses.forEach(s => { %>
              <option value="<%= s.id %>" <%= filters.status == s.id ? 'selected' : '' %>><%= s.name %></option>
            <% }) %>
          </select>
        </div>

        <div class="col-md-3">
          <label for="phone" class="form-label">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
          <input type="text" class="form-control" id="phone" name="phone" value="<%= filters.phone || '' %>" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä...">
        </div>

        <div class="col-md-2 d-flex align-items-end">
          <div class="btn-group w-100">
            <button type="submit" class="btn btn-primary">–ü–æ–∏—Å–∫</button>
            <button type="button" class="btn btn-outline-secondary" onclick="resetFilters()">–°–±—Ä–æ—Å–∏—Ç—å</button>
          </div>
        </div>
      </form>
    </div>
  </div>

  <div class="d-flex justify-content-between align-items-center mb-3">
    <a class="btn btn-success" href="/clients/new">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞</a>
    <button class="btn btn-outline-success" onclick="exportToExcel()">üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel</button>
  </div>

  <div class="table-responsive shadow-sm">
    <table id="clientsTable" class="table table-bordered align-middle">
      <thead class="table-light">
        <tr>
          <th onclick="sortTable('full_name')" style="cursor:pointer;">–§–ò–û <span id="sortIcon_full_name"></span></th>
          <th onclick="sortTable('phone_number')" style="cursor:pointer;">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <span id="sortIcon_phone_number"></span></th>
          <th onclick="sortTable('status')" style="cursor:pointer;">–°—Ç–∞—Ç—É—Å <span id="sortIcon_status"></span></th>
          <th>–î–µ–π—Å—Ç–≤–∏—è</th>
        </tr>
      </thead>
      <tbody>
        <% if (clients.length === 0) { %>
          <tr><td colspan="4" class="text-center text-muted">–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>
        <% } else { %>
          <% clients.forEach(c => { %>
            <tr>
              <td><%= c.full_name %></td>
              <td><%= c.phone_number %></td>
              <td><%= c.client_status ? c.client_status.name : '–ù–µ —É–∫–∞–∑–∞–Ω' %></td>
              <td>
                <a class="btn btn-sm btn-info text-white" href="/clients/<%= c.id %>">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                <a class="btn btn-sm btn-warning" href="/clients/<%= c.id %>/edit">–ò–∑–º–µ–Ω–∏—Ç—å</a>
                <form action="/clients/<%= c.id %>?_method=DELETE" method="POST" class="d-inline" onsubmit="event.preventDefault(); confirmDelete(this);">
                  <button class="btn btn-sm btn-danger" type="submit">–£–¥–∞–ª–∏—Ç—å</button>
                </form>
              </td>
            </tr>
          <% }) %>
        <% } %>
      </tbody>
    </table>
  </div>

  <!-- –ü–∞–≥–∏–Ω–∞—Ü–∏—è -->
  <div class="d-flex justify-content-center mt-3">
    <nav>
      <ul class="pagination">
        <% 
          const queryParams = [];
          if (filters.search && filters.search.trim() !== '') queryParams.push(`search=${encodeURIComponent(filters.search)}`);
          if (filters.status && filters.status !== 'all') queryParams.push(`status=${filters.status}`);
          if (filters.phone && filters.phone.trim() !== '') queryParams.push(`phone=${encodeURIComponent(filters.phone)}`);
          if (filters.sort_by) queryParams.push(`sort_by=${filters.sort_by}`);
          if (filters.sort_order) queryParams.push(`sort_order=${filters.sort_order}`);
          const baseQuery = queryParams.length > 0 ? '&' + queryParams.join('&') : '';
        %>

        <% for (let i = 1; i <= pagination.totalPages; i++) { %>
          <li class="page-item <%= pagination.currentPage === i ? 'active' : '' %>">
            <a class="page-link" href="?page=<%= i %><%= baseQuery %>"><%= i %></a>
          </li>
        <% } %>
      </ul>
    </nav>
  </div>

  <!-- –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã -->
  <% 
    const hasFilters = 
      (filters.search && filters.search.trim() !== '') ||
      (filters.status && filters.status !== 'all') ||
      (filters.phone && filters.phone.trim() !== '') ||
      filters.sort_by;
  %>

  <% if (hasFilters) { %>
    <div class="mt-3">
      <small class="text-muted">
        –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:
        <% if (filters.search && filters.search.trim() !== '') { %> –§–ò–û: "<%= filters.search %>" <% } %>
        <% if (filters.status && filters.status !== 'all') { %> 
          <% const statusObj = statuses.find(s => s.id == filters.status); %>
          <% if (statusObj) { %> | –°—Ç–∞—Ç—É—Å: <%= statusObj.name %> <% } %>
        <% } %>
        <% if (filters.phone && filters.phone.trim() !== '') { %> | –¢–µ–ª–µ—Ñ–æ–Ω: "<%= filters.phone %>" <% } %>
        <% if (filters.sort_by) { %> | –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ: <%= filters.sort_by %> (<%= filters.sort_order === 'desc' ? '—É–±—ã–≤–∞–Ω–∏—é' : '–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é' %>) <% } %>
      </small>
    </div>
  <% } %>
</div>

<!-- Excel export -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script>
function exportToExcel() {
  const table = document.getElementById("clientsTable");
  const wb = XLSX.utils.book_new();

  // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const wsData = [["–§–ò–û", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–°—Ç–∞—Ç—É—Å"]];
  const rows = table.querySelectorAll("tbody tr");

  rows.forEach(row => {
    const cells = row.querySelectorAll("td");
    if (cells.length >= 3) {
      wsData.push([
        cells[0].innerText.trim(),
        cells[1].innerText.trim(),
        cells[2].innerText.trim()
      ]);
    }
  });

  const ws = XLSX.utils.aoa_to_sheet(wsData);

  // –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
  const colWidths = wsData[0].map((_, colIndex) => {
    let maxLength = 10;
    wsData.forEach(row => {
      const cellValue = row[colIndex] ? row[colIndex].toString() : '';
      if (cellValue.length > maxLength) maxLength = cellValue.length;
    });
    return { wch: maxLength + 2 };
  });
  ws['!cols'] = colWidths;

  XLSX.utils.book_append_sheet(wb, ws, "–ö–ª–∏–µ–Ω—Ç—ã");
  XLSX.writeFile(wb, "clients.xlsx");
}

function resetFilters() {
  window.location.href = '/clients';
}

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è)
function sortTable(column) {
  const urlParams = new URLSearchParams(window.location.search);

  const currentSortBy = urlParams.get('sort_by');
  const currentSortOrder = urlParams.get('sort_order');

  let newSortOrder = 'asc';

  if (currentSortBy === column) {
    if (currentSortOrder === 'asc') newSortOrder = 'desc';
    else if (currentSortOrder === 'desc') newSortOrder = ''; // —É–±—Ä–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
  }

  if (newSortOrder) {
    urlParams.set('sort_by', column);
    urlParams.set('sort_order', newSortOrder);
  } else {
    urlParams.delete('sort_by');
    urlParams.delete('sort_order');
  }

  // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  urlParams.set('page', '1');

  window.location.search = urlParams.toString();
}

function getSortIcon(column) {
  const urlParams = new URLSearchParams(window.location.search);
  const sortBy = urlParams.get('sort_by');
  const sortOrder = urlParams.get('sort_order');

  if (sortBy === column) {
    if (sortOrder === 'asc') return '‚ñ≤';
    if (sortOrder === 'desc') return '‚ñº';
  }
  return '';
}

document.addEventListener('DOMContentLoaded', () => {
  ['full_name','phone_number','status'].forEach(col => {
    const iconSpan = document.getElementById('sortIcon_' + col);
    if (iconSpan) iconSpan.innerText = getSortIcon(col);
  });
});
</script>

<%- include('../partials/footer') %>
